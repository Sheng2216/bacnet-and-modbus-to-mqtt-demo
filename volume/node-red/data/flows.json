[
    {
        "id": "e7ed03bfc197124f",
        "type": "tab",
        "label": "ModBUS to MQTT bridge",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2968a4fcf75e9496",
        "type": "tab",
        "label": "BACnet-in & MQTT-out",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "93149d5c4c8ed59e",
        "type": "group",
        "z": "2968a4fcf75e9496",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "b7f7d725869e3810",
            "985b6519a1583a85",
            "57153851918d05a1",
            "ff5e53f63951e2ec",
            "df260e3e743a5d5b",
            "d4b940867a586fa3",
            "01ccf5d2b9c74de5",
            "38652562089973c6",
            "63a1d3713221d2d8",
            "50b5af36dff06a48",
            "3f0182e1ac883eda",
            "f2e2c27c47ed0f7a",
            "483411e5b49b6c2a"
        ],
        "x": 14,
        "y": 159,
        "w": 912,
        "h": 402
    },
    {
        "id": "149c74ca37a6094d",
        "type": "group",
        "z": "2968a4fcf75e9496",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "71f56412e0a1bd0b",
            "94a8707a2c4a4308",
            "30bcabc71382bd19",
            "4195ccca2060a2c5",
            "5ce36754784a00e0",
            "ed51b3734a88ef79",
            "c72af49caa38de08"
        ],
        "x": 954,
        "y": 159,
        "w": 632,
        "h": 402
    },
    {
        "id": "83a842819cf55778",
        "type": "group",
        "z": "2968a4fcf75e9496",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "215dd9c53ae802ad",
            "d0158e4d1410bcf9",
            "f0eb2330582c30b7",
            "54593e8feaea27f5"
        ],
        "x": 1214,
        "y": 579,
        "w": 372,
        "h": 222
    },
    {
        "id": "cc993866ce784d6d",
        "type": "group",
        "z": "e7ed03bfc197124f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "95d90c9e68592536",
            "dce64cc095d4678c",
            "600725af812a6075",
            "13e7e7298027f526",
            "23ebc19c99e6b33b",
            "04f7ab183c6d9470",
            "1b73c8143e25fb4a",
            "384c2435188fbe81"
        ],
        "x": 34,
        "y": 239,
        "w": 1172,
        "h": 162
    },
    {
        "id": "47a469b15c9c5f27",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cf0dca49.2a9ac",
        "type": "BACnet-Instance",
        "name": "Room Simulator",
        "instanceAddress": "1818836"
    },
    {
        "id": "7adbdd83.bce224",
        "type": "BACnet-Device",
        "name": "Windows VM",
        "deviceAddress": "10.2.13.221:55936"
    },
    {
        "id": "e0bf099a.ee8468",
        "type": "BACnet-Client",
        "name": "",
        "adpuTimeout": "3000",
        "port": "47808",
        "interface": "10.2.13.254",
        "broadcastAddress": "255.255.255.255"
    },
    {
        "id": "ef226397.1987f",
        "type": "BACnet-Instance",
        "name": "Temperature Water",
        "instanceAddress": "1"
    },
    {
        "id": "bd769110827337f2",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "6932e01c1949e185",
        "type": "modbus api server",
        "port": "/dev/ttyUSB0",
        "baudRate": "9600",
        "dataBits": "8",
        "parity": "none",
        "stopBits": "1",
        "timeout": "100",
        "interval": "5",
        "capacity": "256"
    },
    {
        "id": "d967d8113b753eee",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "95d90c9e68592536",
        "type": "modbus api request",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "",
        "server": "6932e01c1949e185",
        "setTopic": "0",
        "retries": 0,
        "x": 610,
        "y": 320,
        "wires": [
            [
                "dce64cc095d4678c"
            ],
            []
        ]
    },
    {
        "id": "dce64cc095d4678c",
        "type": "function",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "ModbusRequestApi2Mqtt",
        "func": "var config = {\n  \"devices\": [\n    {\n        \"id\": 42, \"name\": \"LED01\",  \"type\": \"coil\", \"address\": 0, \"quantity\": 1\n    },\n    {\n        \"id\": 42, \"name\": \"sensor01\", \"type\": \"holding\", 'quantity': 2,\n        \"registries\": [\n          { 'name': 'humidity', 'address': 0, 'polling': 60 },\n          { 'name': 'temperature', 'address': 1, 'polling': 60 }\n        ]\n    }\n  ]\n}\n\nmsg._topic = msg.topic;\nmsg._payload = msg.payload;\n\nvar param = msg._topic.split('/');\nvar type = \"\";\nvar method = \"\";\nif (msg._payload.read == undefined) {\n    return;\n} else {\n    type = msg._payload.read;\n    method = \"read\";\n}\n\nif(param.length == 3) {\n    msg.topic = param[0] + '/' + param[1] + '/status';\n    if (method == \"read\") {\n        msg.payload = msg._payload.result.buffer[0];\n    }\n} else if(param.length == 4) {\n    msg.topic = param[0] + '/' + param[1] +'/' + param[2] + '/status';\n    if (method == \"read\") {\n        msg.payload = msg._payload.result.data[0];\n    }\n} else {\n    return;\n}\nif (msg._topic.includes('temperature')) {\n    msg.payload = msg.payload / 100 + 'â„ƒ';\n} else if (msg._topic.includes('humidity')){\n    msg.payload = msg.payload +'% RH';\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "600725af812a6075",
                "384c2435188fbe81"
            ]
        ]
    },
    {
        "id": "e5c64e17da96b882",
        "type": "aedes broker",
        "z": "e7ed03bfc197124f",
        "name": "",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "dburl": "",
        "usetls": false,
        "x": 130,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "600725af812a6075",
        "type": "mqtt out",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "Mqtt publish client",
        "topic": "modbus_sensor",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d967d8113b753eee",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "7df8ae446efc5971",
        "type": "comment",
        "z": "e7ed03bfc197124f",
        "name": "create a mqtt broker (optional)",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "13e7e7298027f526",
        "type": "inject",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "23ebc19c99e6b33b"
            ]
        ]
    },
    {
        "id": "23ebc19c99e6b33b",
        "type": "function",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "Read temperature via Modbus",
        "func": "msg.payload = { \"id\": 42, \"read\": \"holding\", \"addr\": 1, \"quantity\": 1 }\nmsg.topic =\"bridge/sensor01/temperature/read\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "95d90c9e68592536"
            ]
        ]
    },
    {
        "id": "04f7ab183c6d9470",
        "type": "inject",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "1b73c8143e25fb4a"
            ]
        ]
    },
    {
        "id": "1b73c8143e25fb4a",
        "type": "function",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "Read humidity via Modbus",
        "func": "msg.payload = { \"id\": 42, \"read\": \"holding\", \"addr\": 0, \"quantity\": 1 }\nmsg.topic =\"bridge/sensor01/humidity/read\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "95d90c9e68592536"
            ]
        ]
    },
    {
        "id": "384c2435188fbe81",
        "type": "debug",
        "z": "e7ed03bfc197124f",
        "g": "cc993866ce784d6d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 360,
        "wires": []
    },
    {
        "id": "c6a94c7066330618",
        "type": "comment",
        "z": "e7ed03bfc197124f",
        "name": "This demo use Wisblock Slot #1 on WisGate Connect",
        "info": "This demo use Wisblock Slot #1 on WisGate Connect.\nMake sure you have a RAK5802 Modbus module mounted to Slot #1",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "d2bc20f5b257d6fb",
        "type": "comment",
        "z": "e7ed03bfc197124f",
        "name": "Modify MQTT broker configuration if needed",
        "info": "Default broker: localhost:1883\nDefault publish topicï¼› modbus_sensor",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "71f56412e0a1bd0b",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "Aedes Events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 260,
        "wires": []
    },
    {
        "id": "94a8707a2c4a4308",
        "type": "aedes broker",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "Aedes MQTT Broker",
        "mqtt_port": "1883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "dburl": "",
        "usetls": false,
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "71f56412e0a1bd0b"
            ],
            [
                "30bcabc71382bd19"
            ]
        ]
    },
    {
        "id": "30bcabc71382bd19",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "Aedes Publish Events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 320,
        "wires": []
    },
    {
        "id": "4195ccca2060a2c5",
        "type": "mqtt out",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "MQTT Publisher",
        "topic": "sensors",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "47a469b15c9c5f27",
        "x": 1060,
        "y": 380,
        "wires": []
    },
    {
        "id": "5ce36754784a00e0",
        "type": "mqtt in",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "MQTT subscriber",
        "topic": "sensors",
        "qos": "0",
        "datatype": "json",
        "broker": "47a469b15c9c5f27",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1060,
        "y": 520,
        "wires": [
            [
                "ed51b3734a88ef79",
                "215dd9c53ae802ad"
            ]
        ]
    },
    {
        "id": "ed51b3734a88ef79",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "MQTT Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 520,
        "wires": []
    },
    {
        "id": "b7f7d725869e3810",
        "type": "BACnet-Read",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Device description (Room Simulator)",
        "objectType": "8",
        "instance": "cf0dca49.2a9ac",
        "propertyId": "28",
        "device": "7adbdd83.bce224",
        "server": "e0bf099a.ee8468",
        "multipleRead": false,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "3f0182e1ac883eda"
            ]
        ]
    },
    {
        "id": "985b6519a1583a85",
        "type": "inject",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "b7f7d725869e3810"
            ]
        ]
    },
    {
        "id": "57153851918d05a1",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 520,
        "wires": []
    },
    {
        "id": "ff5e53f63951e2ec",
        "type": "BACnet-Command",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Who is?",
        "commandType": "whoIs",
        "timeDuration": 0,
        "enableDisable": 0,
        "deviceState": 0,
        "isUtc": true,
        "lowLimit": 0,
        "highLimit": 0,
        "device": "7adbdd83.bce224",
        "server": "e0bf099a.ee8468",
        "x": 300,
        "y": 520,
        "wires": [
            [
                "57153851918d05a1"
            ]
        ]
    },
    {
        "id": "df260e3e743a5d5b",
        "type": "inject",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "ff5e53f63951e2ec"
            ]
        ]
    },
    {
        "id": "d4b940867a586fa3",
        "type": "BACnet-Read",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Read Temperature Indoor",
        "objectType": "0",
        "instance": "ef226397.1987f",
        "propertyId": "85",
        "device": "7adbdd83.bce224",
        "server": "e0bf099a.ee8468",
        "multipleRead": false,
        "x": 350,
        "y": 360,
        "wires": [
            [
                "38652562089973c6"
            ]
        ]
    },
    {
        "id": "01ccf5d2b9c74de5",
        "type": "BACnet-Read",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Read Temperature Water",
        "objectType": "2",
        "instance": "ef226397.1987f",
        "propertyId": "85",
        "device": "7adbdd83.bce224",
        "server": "e0bf099a.ee8468",
        "multipleRead": false,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "38652562089973c6"
            ]
        ]
    },
    {
        "id": "38652562089973c6",
        "type": "function",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Data Cleaning",
        "func": "msg.payload = msg.payload[\"values\"][0].value;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 380,
        "wires": [
            [
                "4195ccca2060a2c5"
            ]
        ]
    },
    {
        "id": "215dd9c53ae802ad",
        "type": "change",
        "z": "2968a4fcf75e9496",
        "g": "83a842819cf55778",
        "name": "map",
        "rules": [
            {
                "t": "set",
                "p": "fields.value",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "fields.timestamps",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 720,
        "wires": [
            [
                "d0158e4d1410bcf9",
                "f0eb2330582c30b7"
            ]
        ]
    },
    {
        "id": "d0158e4d1410bcf9",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "83a842819cf55778",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 760,
        "wires": []
    },
    {
        "id": "f0eb2330582c30b7",
        "type": "influxdb out",
        "z": "2968a4fcf75e9496",
        "g": "83a842819cf55778",
        "influxdb": "bd769110827337f2",
        "name": "sensors @ influxdb",
        "measurement": "sensors",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1470,
        "y": 680,
        "wires": []
    },
    {
        "id": "63a1d3713221d2d8",
        "type": "comment",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "BACnet part",
        "info": "",
        "x": 390,
        "y": 200,
        "wires": []
    },
    {
        "id": "c72af49caa38de08",
        "type": "comment",
        "z": "2968a4fcf75e9496",
        "g": "149c74ca37a6094d",
        "name": "MQTT part",
        "info": "",
        "x": 1260,
        "y": 200,
        "wires": []
    },
    {
        "id": "54593e8feaea27f5",
        "type": "comment",
        "z": "2968a4fcf75e9496",
        "g": "83a842819cf55778",
        "name": "influxdb (optional, for data visualization)",
        "info": "",
        "x": 1410,
        "y": 620,
        "wires": []
    },
    {
        "id": "50b5af36dff06a48",
        "type": "debug",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 280,
        "wires": []
    },
    {
        "id": "3f0182e1ac883eda",
        "type": "function",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "Data Cleaning",
        "func": "msg.payload = msg.payload[\"values\"][0].value;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "50b5af36dff06a48"
            ]
        ]
    },
    {
        "id": "f2e2c27c47ed0f7a",
        "type": "inject",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "d4b940867a586fa3"
            ]
        ]
    },
    {
        "id": "483411e5b49b6c2a",
        "type": "inject",
        "z": "2968a4fcf75e9496",
        "g": "93149d5c4c8ed59e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "01ccf5d2b9c74de5"
            ]
        ]
    }
]
